<?xml version="1.0" encoding="UTF-8"?>
<project name="Goobi Solr Indexer 3.3" basedir="." default="deploy_withtests" xmlns:jacoco="antlib:org.jacoco.ant">

	<property name="jar.file" value="solrIndexer.jar" />
	<property name="main.class" value="de.intranda.digiverso.presentation.solr.SolrIndexerDaemon" />
	<property name="dir.src" location="./src" />
	<property name="dir.build" location="./build" />
	<property name="dir.build.classes" value="${dir.build}/classes" />
	<property name="dir.lib" value="./lib" />
	<property name="dir.buildlib" value="./lib-build" />
	<property name="classloader.zip" value="${dir.buildlib}/jar-in-jar-loader.zip" />
	<property name="deploy.dir" value="Z:/Deploy/solrIndexer/3.3" />
	<property name="jar.list" value="./ alto.jar commons-codec-1.9.jar commons-collections-3.2.2.jar commons-configuration-1.6.jar commons-io-2.4.jar commons-jxpath-1.2.jar commons-lang-2.6.jar geronimo-stax-api_1.0_spec-1.0.1.jar httpclient-4.5.1.jar httpcore-4.4.3.jar httpmime-4.5.1.jar icu4j-59_1.jar icu4j-charset-59_1.jar icu4j-localespi-59_1.jar javax.mail.jar jaxen-1.1.6.jar jcl-over-slf4j-1.7.25.jar jdom-2.0.6.jar joda-time-2.3.jar jsoup-1.8.3.jar log4j-api-2.8.2.jar log4j-core-2.8.2.jar log4j-slf4j-impl-2.8.2.jar metadata-extractor-2.8.1.jar noggit-0.5.jar normdataimporter.jar slf4j-api-1.7.25.jar solr-solrj-4.10.4.jar wstx-asl-3.2.7.jar xmpcore-5.1.2.jar xpp3_min-1.1.4c.jar xstream-1.4.9.jar zookeeper-3.4.6.jar" />
	<property name="dir.tests.src" value="./test" />
	<property name="dir.tests.classes" value="${dir.build}/test-classes" />
	<property name="dir.tests.report" value="${dir.build}/test-reports" />
	<property name="dir.javadoc" value="doc" />

	<!-- Compiler options -->
	<property name="javac.source" value="1.8" />
	<property name="javac.target" value="1.8" />
	<property name="javac.debug" value="true" />

	<!-- Build classpath -->
	<path id="classpath">
		<pathelement location="src" />
		<!-- Keep in mind that Ant loads all available JARs in the given directories, so two versions of the same lib may cause conficts. -->
		<fileset dir="${dir.lib}" includes="**/*.jar" />
		<fileset dir="${dir.buildlib}" />
	</path>

	<!-- JUnit test classpath -->
	<path id="test.classpath">
		<path refid="classpath" />
		<pathelement location="${dir.build.classes}" />
		<pathelement location="${dir.tests.classes}" />
	</path>

	<!-- <taskdef resource="proguard/ant/task.properties" classpath="lib-build/proguard.jar" /> -->
	<taskdef name="pitest" classname="org.pitest.ant.PitestTask" classpathref="classpath" />

	<target name="clean" description="Deletes compiled files">
		<echo message="Cleaning up..." />
		<delete dir="${dir.build}" />
	</target>

	<target name="compile" depends="clean">
		<delete dir="${dir.build}" />
		<mkdir dir="${dir.build.classes}" />
		<echo message="Compiling source files..." />
		<javac includeantruntime="false" srcdir="${dir.src}" destdir="${dir.build.classes}" source="${javac.source}" target="${javac.target}" encoding="UTF8" verbose="off" debug="${javac.debug}" classpathref="classpath">
			<compilerarg value="-Xlint" />
		</javac>
	</target>

	<!-- Compile unit tests -->
	<target name="compile-tests" depends="compile">
		<mkdir dir="${dir.tests.classes}" />
		<javac includeAntRuntime="false" srcdir="${dir.tests.src}" destdir="${dir.tests.classes}" source="${javac.source}" target="${javac.target}" encoding="UTF8" debug="${javac.debug}" classpathref="test.classpath">
		</javac>
	</target>

	<!-- Run all tests -->
	<target name="junit" depends="compile-tests" description="Run JUnit tests">
		<echo>Running JUnit tests...</echo>
		<mkdir dir="${dir.tests.report}" />
		<junit printsummary="on" haltonerror="true" haltonfailure="true">
			<classpath refid="test.classpath" />
			<formatter type="xml" usefile="true" />
			<batchtest todir="${dir.tests.report}">
				<fileset dir="${dir.tests.classes}" includes="de/intranda/digiverso/presentation/solr/**/*Test.class" excludes="de/intranda/digiverso/presentation/solr/**/AbstractSolr*" />
			</batchtest>
		</junit>
		<delete dir="${dir.tests.classes}" />
	</target>

	<!-- Jacoco code coverage -->
	<target name="junit_coverage" depends="compile-tests" description="Run JUnit tests with jacoco test coverage analysis">
		<echo>Running JUnit tests...</echo>
		<mkdir dir="${dir.tests.report}" />
		<jacoco:coverage>
			<junit printsummary="withOutAndErr" haltonerror="true" haltonfailure="true" logfailedtests="true" fork="true" forkmode="once">
				<classpath refid="test.classpath" />
				<formatter type="xml" usefile="true" />
				<batchtest todir="${dir.tests.report}">
					<fileset dir="${dir.tests.classes}" includes="de/intranda/digiverso/presentation/solr/**/*Test.class" excludes="de/intranda/digiverso/presentation/solr/**/AbstractSolr*" />
				</batchtest>
			</junit>
		</jacoco:coverage>
		<delete dir="${dir.tests.classes}" />
	</target>

	<!-- PIT mutation coverage -->
	<target name="mutation_coverage" depends="compile-tests">
		<pitest pitClasspath="classpath" classPath="test.classpath" targetClasses="de.intranda.*" targetTests="de.intranda.*" reportDir="${dir.tests.report}" sourceDir="${dir.src}" />
	</target>

	<!-- Javadocs -->
	<target name="javadoc">
		<echo>Generating javadoc...</echo>
		<delete dir="${dir.javadoc}" />
		<mkdir dir="${dir.javadoc}" />
		<!-- create javadocs -->
		<javadoc destdir="${dir.javadoc}" sourcepath="${dir.src}" Author="true" version="true" Use="true" noindex="true" Windowtitle="intranda Solr Indexer JavaDoc References" Doctitle="intranda Solr Indexer JavaDoc References" bottom="Copyright 2014, inranda GmbH" encoding="UTF8">
			<classpath refid="classpath">
			</classpath>
			<tag name="should" description="Generate Test Cases plugin" enabled="false"/>
		</javadoc>
	</target>

	<!-- Copy any resource or configuration files. -->
	<target name="resources" description="Copy any resource or configuration files.">
		<echo message="Copying resource and configuration files..." />
		<copy todir="${dir.build.classes}" includeEmptyDirs="no">
			<fileset dir="./src">
				<patternset>
					<include name="**/*.txt" />
					<include name="**/*.conf" />
					<include name="**/*.properties" />
					<include name="**/*.xml" />
					<exclude name="build.xml" />
				</patternset>
			</fileset>
		</copy>
	</target>

	<target name="package_jar_withtests_coverage" depends="compile,junit_coverage,javadoc,resources">
		<echo message="Packaging JAR..." />
		<jar destfile="${dir.build}/${jar.file}" basedir="${dir.build.classes}">
			<fileset dir="lib" />
			<!-- Use a custom Eclipse classloader to load embedded JARs -->
			<zipfileset src="${classloader.zip}" />
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Rsrc-Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Class-Path" value="${jar.list}" />
			</manifest>
		</jar>
	</target>


	<target name="package_jar_withtests" depends="compile,junit,javadoc,resources">
		<echo message="Packaging JAR..." />
		<jar destfile="${dir.build}/${jar.file}" basedir="${dir.build.classes}">
			<fileset dir="lib" />
			<!-- Use a custom Eclipse classloader to load embedded JARs -->
			<zipfileset src="${classloader.zip}" />
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Rsrc-Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Class-Path" value="${jar.list}" />
			</manifest>
		</jar>
		<delete dir="${dir.build.classes}" />
	</target>

	<target name="package_jar_notests" depends="compile,javadoc,resources">
		<echo message="Packaging JAR..." />
		<jar destfile="${dir.build}/${jar.file}" basedir="${dir.build.classes}">
			<fileset dir="lib" />
			<!-- Use a custom Eclipse classloader to load embedded JARs -->
			<zipfileset src="${classloader.zip}" />
			<manifest>
				<attribute name="Main-Class" value="org.eclipse.jdt.internal.jarinjarloader.JarRsrcLoader" />
				<attribute name="Rsrc-Main-Class" value="${main.class}" />
				<attribute name="Class-Path" value="." />
				<attribute name="Rsrc-Class-Path" value="${jar.list}" />
			</manifest>
		</jar>
		<delete dir="${dir.build.classes}" />
	</target>

	<target name="obfuscate" depends="package_jar_notests">
		<echo message="Obfuscating ${jar.file}..." />
		<proguard>
			-dontnote
			-injars ${dir.build}/${jar.file}
			-outjars ${dir.build}/SolrIndexerOBFUSCATED.jar
			-libraryjars "${java.home}/lib/rt.jar"
			-libraryjars "lib/"
			-overloadaggressively
			-dontusemixedcaseclassnames
			-keeppackagenames
			-keep class org.eclipse.*
			-keep public class de.intranda.digiverso.presentation.solr.SolrIndexerDaemon {
			public static void main(java.lang.String[]);
			}
		</proguard>
		<delete file="${dir.build}/${jar.file}">
		</delete>
		<move file="${dir.build}/SolrIndexerOBFUSCATED.jar" tofile="${dir.build}/${jar.file}" />
	</target>

	<target name="deploy_withtests" depends="package_jar_withtests" description="Copies the JAR to the destination defined in deploy.dir (runs JUnit tests prior to building)">
		<copy todir="${deploy.dir}" overwrite="true">
			<fileset dir="${dir.build}">
				<include name="${jar.file}" />
			</fileset>
		</copy>
		<echo>Alles ist gut!</echo>
	</target>

	<target name="deploy_notests" depends="package_jar_notests" description="Copies the JAR to the destination defined in deploy.dir">
		<copy todir="${deploy.dir}" overwrite="true">
			<fileset dir="${dir.build}">
				<include name="${jar.file}" />
			</fileset>
		</copy>
		<echo>Alles ist gut!</echo>
	</target>

</project>
